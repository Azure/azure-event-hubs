# Microsoft Azure IoT Device Libraries
# Copyright (c) Microsoft Corporation
# All rights reserved. 
# MIT License
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated 
# documentation files (the Software), to deal in the Software without restriction, including without limitation 
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, 
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED 
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
# IN THE SOFTWARE.

#how building the unittests goes in general (no matter platform/compiler etc)
#every unittest project targets one specific object file that has been compiled before
#then there is a usually one .cpp file (holds the actual tests) and one .c file (main.c - that's the test runner) that are compiled 
#to produce the executable several objects are linked together: micromock, ctest, and the two objects previously compiled above

#given the above, there shall be 1 makefile in the root of all the *_unittests folders
#this makefile shall hold common settings (such as compiler settings), shall have a dependency on the micromock and ctest objects
#and shall descend into every folder where it will automatically discover the code to be compiled (*.cpp, *.c) and compile it.
#Once that code is compiled, it will delegate control to a local makefile

#the local makefile has as single purpose the linking of the different objects: micromock, ctest,
#the objects that have been compiled by the "father" makefile and the "code under test" objects (the "father" makefile cannot know that).
#and it holds the name of the executable to be created

#this file is the "father" makefile from the paragraph above

MICROMOCK_MAKEFILE_LOCATION=../../testtools/micromock/build/linux
CTEST_MAKEFILE_LOCATION=../../testtools/ctest/build/linux

#this is the makefile for code under test
CODE_UNDER_TEST_MAKEFILE=../build/linux

#setting INCLUDE_FILES_LOCATION to be a list of include folders (notice both C and C++ use the same...)
INCLUDE_FILES_LOCATION=\
$(HOME)/include \
../inc \
../../common/inc \
../../common/src \
../../testtools/micromock/inc \
../../testtools/testrunnerswitcher/inc \
../../testtools/ctest/inc \
../../testtools/sal/inc \
../../testtools/eventhub_test/inc \
../../testtools/eventhub_test/src

#to feed INCLUDES to the compiler, every folder needs to be turned into a -IfolderName command line parameter
#this is what this lines does
CC_INCLUDES = $(patsubst %, -I%, $(INCLUDE_FILES_LOCATION))

#build folders (by convention) are all the folders that have the name *_unittests and e2etests.
BUILD_FOLDERS=$(wildcard *_unittests) \
	$(wildcard *_e2etests)

#C sources to be build from all these folders
SOURCES_C=$(wildcard *_unittests/*.c) \
	$(wildcard *_e2etests/*.c)

#Cpp sources to be build from all these folders
SOURCES_CPP=$(wildcard *_unittests/*.cpp) \
	$(wildcard *_e2etests/*.cpp)

#this is the place where all the "additional regular" (That is, those who come out of "Common" folder goes)
COMMON_OBJECT_DIR=../../../common/src

#this is a substitution reference http://www.gnu.org/software/make/manual/make.html#Substitution-Refs
#this substitution reference said that for all the files in SOURCES_C, replace .c at the end with .o and those are the names of the object files
OBJECTS_C=$(SOURCES_C:.c=.o)

#this is a substitution reference http://www.gnu.org/software/make/manual/make.html#Substitution-Refs
#this substitution reference said that for all the files in SOURCES_CPP, replace .c at the end with .opp and those are the names of the object files
#notice how we need different extensions for the objects of C and C++ because they are produced by different rules later (different command lines)
OBJECTS_CPP=$(SOURCES_CPP:.cpp=.opp)

#these are compilation flags passed to the compiler for every C file
CFLAGS=-c -g -std=c11 -DUSING_PTHREAD -pthread \
	-Wall -Wfatal-errors -Wno-missing-braces -Wextra \
	-Wno-missing-field-initializers -Wformat=2 \
	-Wswitch-default -Wcast-align -Wpointer-arith \
	-Wbad-function-cast -Wstrict-overflow=5 -Wstrict-prototypes -Winline \
	-Wundef -Wnested-externs -Wshadow -Wunreachable-code \
	-Wlogical-op -Wfloat-equal -Wstrict-aliasing=2 \
	-Wold-style-definition -Werror -Wno-unused-function -Wno-unused-value -Wno-unused-variable \
	-DUSE_CTEST \
	-DGB_DEBUG_ALLOC -DGB_MEASURE_MEMORY_FOR_THIS $(EXTRA_CL_OPTIONS) \

#these are compilation flags passed to the compiler for every C++ file
CPPFLAGS=-c -g -Wall -Wfatal-errors -DUSE_CTEST -std=c++0x -Wno-unused-function -Wno-unused-variable -Wno-unused-value \
	-DGB_DEBUG_ALLOC -DGB_MEASURE_MEMORY_FOR_THIS \

#this is our C compiler
CC=gcc

#this is our C++ compiler
CPPC=g++

#this is the common command line that is used by every C source file to be turned into an object file
# $< means "the first prerequisite" (see http://ftp.gnu.org/old-gnu/Manuals/make-3.79.1/html_chapter/make_10.html#SEC101)
# $@ is "The file name of the target of the rule."
COMMON_COMMAND_LINE_C=$(CC) $(CC_INCLUDES) $(CFLAGS) $< -o $@

#this is the common command line that is used by every C source file to be turned into an object file
# $< means "the first prerequisite" (see http://ftp.gnu.org/old-gnu/Manuals/make-3.79.1/html_chapter/make_10.html#SEC101)
# $@ is "The file name of the target of the rule."
COMMON_COMMAND_LINE_CPP=$(CPPC) $(CC_INCLUDES) $(CPPFLAGS) $< -o $@

#main.c is special, it has one of them nested externs. There is something I really do not understand, and that is
#why if %main.o: %main.c is moved *after* %.o: %.c then %main.o stops matching anything... 
%main.o: %main.c
	$(COMMON_COMMAND_LINE_C) -Wno-nested-externs

#this is a pattern rule http://www.gnu.org/software/make/manual/make.html#Pattern-Rules
#this rule says: "for anything that is a target ending in .o (such as Device.o) have as prerequisite the .c file)
%.o: %.c
	$(COMMON_COMMAND_LINE_C)

#these are exported variables to the linking makefile:
#OUTDIR: this is where the output goes. reason: avoid duplication in every makefile
#EXECUTABLE_NAME: this is the executable name to be build. Reason: I don't know how to get easily the folder name.
#UNIT_TEST_LIBRARIES: this is Micromock and CTest libraries

#the output folder where the result of the compilation goes. Since it needs to be known by underlying makefiles... it is exported
export OUTDIR=../../build/linux

#these are the unittest libraries that every unittest is linking against
#since we know that unittests are one level deeper, we shall add a "../" to the path.
export UNIT_TEST_LIBRARIES=../$(MICROMOCK_MAKEFILE_LOCATION)/libmicromock.a ../$(CTEST_MAKEFILE_LOCATION)/libctest.a

#the below constructs are taken "as is" from http://www.gnu.org/software/make/manual/make.html#Phony-Targets
.PHONY: subdirs $(BUILD_FOLDERS)

subdirs: $(BUILD_FOLDERS)

$(BUILD_FOLDERS):
	@export EXECUTABLE_NAME=$@; \
	if [ -f $@/makefile.linux ]; then \
		$(MAKE) -C $@ -f makefile.linux $(OUTDIR)/$@; \
	fi

#first, take care of our dependencies, make sure they are build up to date 
#that would be Micromock and CTest
all: code_under_test_objects $(CTEST_MAKEFILE_LOCATION)/libctest.a $(MICROMOCK_MAKEFILE_LOCATION)/libmicromock.a $(OBJECTS_C) $(OBJECTS_CPP) subdirs
	
code_under_test_objects:
	$(MAKE) -C $(CODE_UNDER_TEST_MAKEFILE) -f makefile_only_objects.linux all
	
$(MICROMOCK_MAKEFILE_LOCATION)/libmicromock.a:
	$(MAKE) -C $(MICROMOCK_MAKEFILE_LOCATION) -f makefile.linux all

$(CTEST_MAKEFILE_LOCATION)/libctest.a:
	$(MAKE) -C $(CTEST_MAKEFILE_LOCATION) -f makefile.linux all

#this is a pattern rule http://www.gnu.org/software/make/manual/make.html#Pattern-Rules
#this rule says: "for anything that is a target ending in .opp (such as some_unittests.opp) have as prerequisite the .cpp file)
%.opp: %.cpp
	$(COMMON_COMMAND_LINE_CPP)		

clean:
	$(RM) $(OBJECTS_CPP) $(OBJECTS_C)
	$(MAKE) -C $(MICROMOCK_MAKEFILE_LOCATION) -f makefile.linux clean
	$(MAKE) -C $(CTEST_MAKEFILE_LOCATION) -f makefile.linux clean
	$(MAKE) -C $(CODE_UNDER_TEST_MAKEFILE) -f makefile_only_objects.linux clean
	@for d in $(BUILD_FOLDERS) ; do \
		export EXECUTABLE_NAME=$$d ;\
		if [ -f $$d/makefile.linux ]; then \
			$(MAKE) -C $$d -f makefile.linux clean; \
		fi \
	done
